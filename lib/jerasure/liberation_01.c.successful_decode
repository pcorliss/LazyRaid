/* Examples/liberation_01.c
 * James S. Plank

Jerasure - A C/C++ Library for a Variety of Reed-Solomon and RAID-6 Erasure Coding Techniques
Copright (C) 2007 James S. Plank

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
  
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  
James S. Plank
Department of Electrical Engineering and Computer Science
University of Tennessee 
Knoxville, TN 37996
plank@cs.utk.edu
*/

/*
 * $Revision: 1.2 $
 * $Date: 2008/08/19 17:41:40 $
 */
    

/*
	revised by S. Simmerman
	2/25/08  
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "jerasure.h"
#include "liberation.h"

#define talloc(type, num) (type *) malloc(sizeof(type)*(num))

usage(char *s)
{
  fprintf(stderr, "usage: liberation_01 k w - Liberation RAID-6 coding/decoding example in GF(2^w).\n");
  fprintf(stderr, "       \n");
  fprintf(stderr, "       w must be prime and k <= w.  It sets up a Liberation bit-matrix\n");
  fprintf(stderr, "       then it encodes k devices of w*%d bytes using dumb bit-matrix scheduling.\n", sizeof(long));
  fprintf(stderr, "       It decodes using smart bit-matrix scheduling.\n");
  fprintf(stderr, "       \n");
  fprintf(stderr, "This demonstrates: liberation_coding_bitmatrix()\n");
  fprintf(stderr, "                   jerasure_smart_bitmatrix_to_schedule()\n");
  fprintf(stderr, "                   jerasure_dumb_bitmatrix_to_schedule()\n");
  fprintf(stderr, "                   jerasure_schedule_encode()\n");
  fprintf(stderr, "                   jerasure_schedule_decode_lazy()\n");
  fprintf(stderr, "                   jerasure_print_bitmatrix()\n");
  fprintf(stderr, "                   jerasure_get_stats()\n");
  if (s != NULL) fprintf(stderr, "%s\n", s);
  exit(1);
}


static void print_data_and_coding(int k, int m, int w, int psize, 
		char **data, char **coding) 
{
	int i, j, x, n, sp;
	long l;

	if(k > m) n = k;
	else n = m;
	sp = psize * 2 + (psize/4) + 12;

	printf("%-*sCoding\n", sp, "Data");
	for(i = 0; i < n; i++) {
		for (j = 0; j < w; j++) {
			if(i < k) {

				if(j==0) printf("D%-2d p%-2d:", i,j);
				else printf("    p%-2d:", j);
				for(x = 0; x < psize; x +=4) {
					memcpy(&l, data[i]+j*psize+x, sizeof(long));
					printf(" %08lx", l);
				}
				printf("    ");
			}
			else printf("%*s", sp, "");
			if(i < m) {
				if(j==0) printf("C%-2d p%-2d:", i,j);
				else printf("    p%-2d:", j);
				for(x = 0; x < psize; x +=4) {
					memcpy(&l, coding[i]+j*psize+x, sizeof(long));
					printf(" %08lx", l);
				}
			}
			printf("\n");
		}
	}

    printf("\n");
}

int main(int argc, char **argv)
{
  long l;
  int k, w, i, j, m;
  int *bitmatrix;
  char **data, **coding, **ptrs;
  int **dumb;
  int *erasures, *erased;
  double stats[3];
  //int w = 8;
  
  if (argc != 3) usage(NULL);
  if (sscanf(argv[1], "%d", &k) == 0 || k <= 0) usage("Bad k");
  if (sscanf(argv[2], "%d", &w) == 0 || w <= 0 || w > 32) usage("Bad w");
  //if (sscanf(argv[2], "%d", &w) == 0 || w <= 0 || w > 4096) usage("Bad w");
  m = 2;
  if (w < k) usage("k is too big");

  bitmatrix = liberation_coding_bitmatrix(k,w);
  if (bitmatrix == NULL) {
    usage("couldn't make coding matrix");
  }

  //printf("Coding Bit-Matrix:\n\n");
  //jerasure_print_bitmatrix(bitmatrix, w*m, w*k, w);
  //printf("\n");

  dumb = jerasure_dumb_bitmatrix_to_schedule(k, m, w, bitmatrix);

  //srand48(0);
  data = talloc(char *, k);
  for (i = 0; i < k; i++) {
    //consider calloc
    data[i] = talloc(char, sizeof(long)*w);
    
    
    /*for (j = 0; j < w; j++) {
      l = lrand48();
      memcpy(data[i]+j*sizeof(long), &l, sizeof(long));
    }*/
  }

  coding = talloc(char *, m);
  for (i = 0; i < m; i++) {
    //consider calloc
    coding[i] = talloc(char, sizeof(long)*w);
  }
  
  
  
  //data and coding have been initalized.
  //Run the following in a loop reading in 64 bytes of data at a time.
  //output coding to parity files
  
  //infile = fopen(RSTRING_PTR(*subelem[i]),"rb");
  //fread(filebuf, length, 1, infile);
  //fclose(fileout);


  /*
  FILE *file1 = fopen("random_100M_1.img","rb");
  FILE *file2 = fopen("random_100M_2.img","rb");
  FILE *pout = fopen("p.out","ab");
  FILE *qout = fopen("q.out","ab");
  int read1 = 0;
  int read2 = 0;
  int read = 0;
  while(!feof(file1) && !feof(file2)){
    read1 = fread(data[0],sizeof(long),w,file1);
    read2 = fread(data[1],sizeof(long),w,file2);
    
    if(read1 >= read2){
      read = read1;
    } else {
      read = read2;
    }
    //Need to zero out remainder of data if fread returns a number smaller than sizeof(long)*w
    
    
    //printf("Files opened and data stored.\n");

    jerasure_schedule_encode(k, m, w, dumb, data, coding, w*sizeof(long), sizeof(long));
    //jerasure_get_stats(stats);
    //printf("Smart Encoding Complete: - %.0lf XOR'd bytes\n\n", stats[0]);
    //print_data_and_coding(k, m, w, sizeof(long), data, coding);
    
    fwrite(coding[0], read, 8, pout);
    fwrite(coding[1], read, 8, qout);
  }
  
  fclose(file1);
  fclose(file2);
  fclose(pout);
  fclose(qout);
  */

/*  
a296dd901b25947cf3897c28eca5e433  random_100M_1.img
b2dd90f4e37c0cf067ea730f5bb6f434  random_100M_2.img
6d5aea488ba7402b717de57c08216256  p.out
1f299222962c0f3765eddf379a360964  q.out
*/

  FILE *file1 = fopen("random_1M_1.img","rb");
  FILE *file2 = fopen("random_1M_2.img","rb");
  FILE *pout = fopen("p.out","rb");
  FILE *qout = fopen("q.out","rb");
  int read1 = 0;
  int read2 = 0;
  int read = 0;
  
  erasures = talloc(int, (m+1));
  erasures[0] = 0;
  erasures[1] = -1;
  //erasures[2] = -1;
  bzero(data[0], sizeof(long)*w);
  //bzero(data[1], sizeof(long)*w);
  while(!feof(pout) && !feof(qout)){
    read1 = fread(coding[0],sizeof(long),w,pout);
    read2 = fread(coding[1],sizeof(long),w,qout);
    fread(data[1],sizeof(long),w,file2);
    
    if(read1 >= read2){
      read = read1;
    } else {
      read = read2;
    }
    //Need to zero out remainder of data if fread returns a number smaller than sizeof(long)*w
    
    
    //printf("Files opened and data stored.\n");

    //jerasure_schedule_encode(k, m, w, dumb, data, coding, w*sizeof(long), sizeof(long));
    //jerasure_get_stats(stats);
    //printf("Smart Encoding Complete: - %.0lf XOR'd bytes\n\n", stats[0]);
    //print_data_and_coding(k, m, w, sizeof(long), data, coding);
    
    //fwrite(coding[0], read, 8, pout);
    //fwrite(coding[1], read, 8, qout);
    
    jerasure_schedule_decode_lazy(k, m, w, bitmatrix, erasures, data, coding, w*sizeof(long), sizeof(long), 1);
    
    
    fwrite(data[0], read, 8, file1);
    //fwrite(data[1], read, 8, file2);
  }
  
  fclose(file1);
  fclose(file2);
  fclose(pout);
  fclose(qout);
  
  
  
    
  

  

  
  
  
  
  
  return 0;
}
